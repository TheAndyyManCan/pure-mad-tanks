'use strict';

const Tank = require("./Tank.class");

/**
 * @class Player class to hold player information and handle player state
 * @property {string} #id the player's socket id generate by socket.io
 * @property {string} #nickname the nickname the player chooses
 * @property {string} #playerState the current state of the player
 * @property {object} #tank the tank object associated with the player if the player is playing
 * @property {float} #mouseX the last recorded X co-ordinate of the player's mouse
 * @property {float} #mouseY the last recorded Y co-ordinate of the player's mouse
 * @property {bool} tankSpawned flag to determine if a tank has already been spawned for the player
 */
class Player {

    #id;
    #nickname;
    #playerState; // connected, named, ready, disconnected, winner, loser
    #tank;
    #mouseX;
    #mouseY;
    tankSpawned = false;

    /**
     * @constructor constructor for the player class
     * Creates a new player instance with the given socket id
     * @param {int} socket id for the player generated by socket.io
     */
    constructor(id){
        this.#id = id;
    }

    // class getters
    get id(){return this.#id;}
    get nickname(){return this.#nickname;}
    get playerState(){return this.#playerState;}
    get tank(){return this.#tank;}
    get mouseX(){return this.#mouseX;}
    get mouseY(){return this.#mouseY;}

    /**
     * Sets the nickname property and validates against the player's id
     * @param {string} socketId socket id generated by socket.io
     * @param {string} nickname nickname chosen by the player
     */
    setNickname(socketId, nickname){
        if(socketId == this.id){
            this.#nickname = nickname;
        }
    }

    /**
     * Sets the playerState property and validates against the player's id
     * @param {string} socketId socket id generated by socket.io
     * @param {string} state the new player state to be updated
     */
    setPlayerState(socketId, state){
        if(socketId == this.id){
            this.#playerState = state;
        }
    }

    /**
     * Spawns a new tank to be associated with the player
     * @param {int} x x co-ordinate for the new tank
     * @param {int} y y co-ordinate for the new tank
     * @param {int} scale the scale used by the world the tank is to be spawned in
     * @param {object} world b2d world object where the tank will be spawned
     */
    spawnTank = (x, y, scale, world) => {
        this.#tank = new Tank(1.0, 0.5, 0.05, x, y, 100, 100, 'tank', this.#id + 'tank', scale, world, 'tank', this.#id);
    };

    /**
     * Calls the move tank function in the tank class
     * @param {int} keycode the integer associated with the keycode collected by the event listener to move the tank
     */
    moveTank = (keycode) => {
        this.#tank.moveTank(keycode);
    };

    /**
     * Updates the mouse position for the player
     * @param {object} e the event object to extract the data from
     */
    updateMousePosition = (e) => {
        this.#mouseX = e.x;
        this.#mouseY = e.y;
    }
}

module.exports = Player;
